{"version":3,"sources":["useContextMenu.js","Menu.js","App.js","serviceWorker.js","index.js"],"names":["useContextMenu","outerRef","useState","xPos","setXPos","yPos","setYPos","menu","showMenu","handleContextMenu","useCallback","event","preventDefault","current","contains","target","pageX","pageY","handleClick","useEffect","document","addEventListener","removeEventListener","Menu","className","style","top","left","App","useRef","ref","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sLAqCeA,EAnCQ,SAAAC,GAAa,IAAD,EACTC,mBAAS,OADA,mBAC1BC,EAD0B,KACpBC,EADoB,OAETF,mBAAS,OAFA,mBAE1BG,EAF0B,KAEpBC,EAFoB,OAGRJ,oBAAS,GAHD,mBAG1BK,EAH0B,KAGpBC,EAHoB,KAK3BC,EAAoBC,uBACxB,SAAAC,GACEA,EAAMC,iBACFX,GAAYA,EAASY,QAAQC,SAASH,EAAMI,SAC9CX,EAAQ,GAAD,OAAIO,EAAMK,MAAV,OACPV,EAAQ,GAAD,OAAIK,EAAMM,MAAV,OACPT,GAAS,IAETA,GAAS,KAGb,CAACA,EAAUP,EAAUG,EAASE,IAG1BY,EAAcR,uBAAY,WAC9BF,GAAS,KACR,CAACA,IAWJ,OATAW,qBAAU,WAGR,OAFAC,SAASC,iBAAiB,QAASH,GACnCE,SAASC,iBAAiB,cAAeZ,GAClC,WACLW,SAASC,iBAAiB,QAASH,GACnCE,SAASE,oBAAoB,cAAeb,OAIzC,CAAEN,OAAME,OAAME,SCfRgB,EAfF,SAAC,GAAkB,IAAhBtB,EAAe,EAAfA,SAAe,EACAD,EAAeC,GAApCE,EADqB,EACrBA,KAAME,EADe,EACfA,KAEd,OAH6B,EACTE,KAIhB,wBAAIiB,UAAU,OAAOC,MAAO,CAAEC,IAAKrB,EAAMsB,KAAMxB,IAC7C,qCACA,qCACA,sCAIC,sCCFMyB,MAVf,WACE,IAAM3B,EAAW4B,iBAAO,MAExB,OACE,yBAAKC,IAAK7B,EAAUuB,UAAU,OAC5B,kBAAC,EAAD,CAAMvB,SAAUA,MCGF8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASkB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a4a4015a.chunk.js","sourcesContent":["import { useEffect, useCallback, useState } from \"react\";\n\nconst useContextMenu = outerRef => {\n  const [xPos, setXPos] = useState(\"0px\");\n  const [yPos, setYPos] = useState(\"0px\");\n  const [menu, showMenu] = useState(false);\n\n  const handleContextMenu = useCallback(\n    event => {\n      event.preventDefault();\n      if (outerRef && outerRef.current.contains(event.target)) {\n        setXPos(`${event.pageX}px`);\n        setYPos(`${event.pageY}px`);\n        showMenu(true);\n      } else {\n        showMenu(false);\n      }\n    },\n    [showMenu, outerRef, setXPos, setYPos]\n  );\n\n  const handleClick = useCallback(() => {\n    showMenu(false);\n  }, [showMenu]);\n\n  useEffect(() => {\n    document.addEventListener(\"click\", handleClick);\n    document.addEventListener(\"contextmenu\", handleContextMenu);\n    return () => {\n      document.addEventListener(\"click\", handleClick);\n      document.removeEventListener(\"contextmenu\", handleContextMenu);\n    };\n  });\n\n  return { xPos, yPos, menu };\n};\n\nexport default useContextMenu;\n","import React from \"react\";\n\nimport useContextMenu from \"./useContextMenu\";\n\nconst Menu = ({ outerRef }) => {\n  const { xPos, yPos, menu } = useContextMenu(outerRef);\n\n  if (menu) {\n    return (\n      <ul className=\"menu\" style={{ top: yPos, left: xPos }}>\n        <li>Item1</li>\n        <li>Item2</li>\n        <li>Item3</li>\n      </ul>\n    );\n  }\n  return <></>;\n};\n\nexport default Menu;\n","import React, { useRef } from \"react\";\n\nimport Menu from \"./Menu\";\n\nfunction App() {\n  const outerRef = useRef(null);\n\n  return (\n    <div ref={outerRef} className=\"app\">\n      <Menu outerRef={outerRef} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}